<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" id="visual" viewBox="0 0 960 540" width="960" height="540" version="1.1"><script>(
            function hookGeo() {
  //<![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${hookGeo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><rect x="0" y="0" width="960" height="540" fill="#2D132C"/><path d="M0 266L10 261.8C20 257.7 40 249.3 60 253.8C80 258.3 100 275.7 120 275.3C140 275 160 257 180 254.7C200 252.3 220 265.7 240 274.5C260 283.3 280 287.7 300 277.3C320 267 340 242 360 232.2C380 222.3 400 227.7 420 239.5C440 251.3 460 269.7 480 279.2C500 288.7 520 289.3 540 282.2C560 275 580 260 600 258C620 256 640 267 660 278.8C680 290.7 700 303.3 720 305.3C740 307.3 760 298.7 780 297.3C800 296 820 302 840 305.5C860 309 880 310 900 302.7C920 295.3 940 279.7 950 271.8L960 264L960 541L950 541C940 541 920 541 900 541C880 541 860 541 840 541C820 541 800 541 780 541C760 541 740 541 720 541C700 541 680 541 660 541C640 541 620 541 600 541C580 541 560 541 540 541C520 541 500 541 480 541C460 541 440 541 420 541C400 541 380 541 360 541C340 541 320 541 300 541C280 541 260 541 240 541C220 541 200 541 180 541C160 541 140 541 120 541C100 541 80 541 60 541C40 541 20 541 10 541L0 541Z" fill="#801336"/><path d="M0 280L10 281.8C20 283.7 40 287.3 60 283.5C80 279.7 100 268.3 120 267.7C140 267 160 277 180 285.8C200 294.7 220 302.3 240 306.5C260 310.7 280 311.3 300 309.3C320 307.3 340 302.7 360 299.8C380 297 400 296 420 292.5C440 289 460 283 480 283.8C500 284.7 520 292.3 540 299.5C560 306.7 580 313.3 600 314.2C620 315 640 310 660 313.8C680 317.7 700 330.3 720 326.2C740 322 760 301 780 297C800 293 820 306 840 308.8C860 311.7 880 304.3 900 298.7C920 293 940 289 950 287L960 285L960 541L950 541C940 541 920 541 900 541C880 541 860 541 840 541C820 541 800 541 780 541C760 541 740 541 720 541C700 541 680 541 660 541C640 541 620 541 600 541C580 541 560 541 540 541C520 541 500 541 480 541C460 541 440 541 420 541C400 541 380 541 360 541C340 541 320 541 300 541C280 541 260 541 240 541C220 541 200 541 180 541C160 541 140 541 120 541C100 541 80 541 60 541C40 541 20 541 10 541L0 541Z" fill="#8c1639"/><path d="M0 309L10 321.3C20 333.7 40 358.3 60 357.2C80 356 100 329 120 318C140 307 160 312 180 320.5C200 329 220 341 240 351.7C260 362.3 280 371.7 300 364.5C320 357.3 340 333.7 360 327.7C380 321.7 400 333.3 420 335.5C440 337.7 460 330.3 480 333.3C500 336.3 520 349.7 540 350.5C560 351.3 580 339.7 600 331.2C620 322.7 640 317.3 660 324.7C680 332 700 352 720 363C740 374 760 376 780 364.7C800 353.3 820 328.7 840 322C860 315.3 880 326.7 900 335.8C920 345 940 352 950 355.5L960 359L960 541L950 541C940 541 920 541 900 541C880 541 860 541 840 541C820 541 800 541 780 541C760 541 740 541 720 541C700 541 680 541 660 541C640 541 620 541 600 541C580 541 560 541 540 541C520 541 500 541 480 541C460 541 440 541 420 541C400 541 380 541 360 541C340 541 320 541 300 541C280 541 260 541 240 541C220 541 200 541 180 541C160 541 140 541 120 541C100 541 80 541 60 541C40 541 20 541 10 541L0 541Z" fill="#971a3b"/><path d="M0 351L10 350C20 349 40 347 60 346.3C80 345.7 100 346.3 120 352C140 357.7 160 368.3 180 372.8C200 377.3 220 375.7 240 378.8C260 382 280 390 300 396.3C320 402.7 340 407.3 360 401C380 394.7 400 377.3 420 376.3C440 375.3 460 390.7 480 388.2C500 385.7 520 365.3 540 367C560 368.7 580 392.3 600 403.8C620 415.3 640 414.7 660 412.5C680 410.3 700 406.7 720 406.7C740 406.7 760 410.3 780 411C800 411.7 820 409.3 840 406.3C860 403.3 880 399.7 900 390.8C920 382 940 368 950 361L960 354L960 541L950 541C940 541 920 541 900 541C880 541 860 541 840 541C820 541 800 541 780 541C760 541 740 541 720 541C700 541 680 541 660 541C640 541 620 541 600 541C580 541 560 541 540 541C520 541 500 541 480 541C460 541 440 541 420 541C400 541 380 541 360 541C340 541 320 541 300 541C280 541 260 541 240 541C220 541 200 541 180 541C160 541 140 541 120 541C100 541 80 541 60 541C40 541 20 541 10 541L0 541Z" fill="#a31e3d"/><path d="M0 425L10 427.5C20 430 40 435 60 435.7C80 436.3 100 432.7 120 427.3C140 422 160 415 180 417C200 419 220 430 240 436.3C260 442.7 280 444.3 300 438.3C320 432.3 340 418.7 360 418.3C380 418 400 431 420 438.3C440 445.7 460 447.3 480 437.3C500 427.3 520 405.7 540 404.2C560 402.7 580 421.3 600 422.2C620 423 640 406 660 398.2C680 390.3 700 391.7 720 394.3C740 397 760 401 780 406.3C800 411.7 820 418.3 840 415.2C860 412 880 399 900 395C920 391 940 396 950 398.5L960 401L960 541L950 541C940 541 920 541 900 541C880 541 860 541 840 541C820 541 800 541 780 541C760 541 740 541 720 541C700 541 680 541 660 541C640 541 620 541 600 541C580 541 560 541 540 541C520 541 500 541 480 541C460 541 440 541 420 541C400 541 380 541 360 541C340 541 320 541 300 541C280 541 260 541 240 541C220 541 200 541 180 541C160 541 140 541 120 541C100 541 80 541 60 541C40 541 20 541 10 541L0 541Z" fill="#af223f"/><path d="M0 443L10 448.3C20 453.7 40 464.3 60 469.8C80 475.3 100 475.7 120 476.2C140 476.7 160 477.3 180 471C200 464.7 220 451.3 240 448.8C260 446.3 280 454.7 300 453.2C320 451.7 340 440.3 360 437C380 433.7 400 438.3 420 443C440 447.7 460 452.3 480 454.7C500 457 520 457 540 459.3C560 461.7 580 466.3 600 469.5C620 472.7 640 474.3 660 471.3C680 468.3 700 460.7 720 456.3C740 452 760 451 780 453.3C800 455.7 820 461.3 840 462.7C860 464 880 461 900 463.2C920 465.3 940 472.7 950 476.3L960 480L960 541L950 541C940 541 920 541 900 541C880 541 860 541 840 541C820 541 800 541 780 541C760 541 740 541 720 541C700 541 680 541 660 541C640 541 620 541 600 541C580 541 560 541 540 541C520 541 500 541 480 541C460 541 440 541 420 541C400 541 380 541 360 541C340 541 320 541 300 541C280 541 260 541 240 541C220 541 200 541 180 541C160 541 140 541 120 541C100 541 80 541 60 541C40 541 20 541 10 541L0 541Z" fill="#bb2740"/><path d="M0 496L10 498.7C20 501.3 40 506.7 60 503.3C80 500 100 488 120 483C140 478 160 480 180 486.3C200 492.7 220 503.3 240 503.5C260 503.7 280 493.3 300 487.7C320 482 340 481 360 483.2C380 485.3 400 490.7 420 495.8C440 501 460 506 480 504C500 502 520 493 540 488.7C560 484.3 580 484.7 600 482.5C620 480.3 640 475.7 660 476.8C680 478 700 485 720 490.8C740 496.7 760 501.3 780 497.7C800 494 820 482 840 478.2C860 474.3 880 478.7 900 479.8C920 481 940 479 950 478L960 477L960 541L950 541C940 541 920 541 900 541C880 541 860 541 840 541C820 541 800 541 780 541C760 541 740 541 720 541C700 541 680 541 660 541C640 541 620 541 600 541C580 541 560 541 540 541C520 541 500 541 480 541C460 541 440 541 420 541C400 541 380 541 360 541C340 541 320 541 300 541C280 541 260 541 240 541C220 541 200 541 180 541C160 541 140 541 120 541C100 541 80 541 60 541C40 541 20 541 10 541L0 541Z" fill="#c72c41"/></svg>